"""
В прошлой миссии — Warriors — вы научились устраивать дуэли между 2 отдельными воинами. Отличная работа!
Но давайте перейдём к чему-то более эпичному — к армиям!
В этой миссии ваша задача — добавить к уже существующим классам и функциям новые.
Одним из новых классов должен стать класс - Army , который будет обладать методом add_units() , позволяющим добавлять выбранное количество воинов в армию.
Первый добавленный юнит будет первым, кто вступит в бой, второй будет вторым, и так далее.
Также нужно создать класс Battle() с функцией fight() , которая будет устраивать сражения и определять сильнейшую армию.

Сражения между армиями происходят по следующему принципу:
• сперва проводится дуэль между первым воином первой армии и первым воином второй
• как только один из них погибает — в дуэль вступает следующий воин из той армии, которая потеряла бойца, а выживший воин со своим текущим здоровьем продолжает сражаться
• так продолжается до тех пор, пока все воины одной из армий не умрут. В этом случае функция battle() возвращает True , если первая армия выиграла или False , если вторая оказалась сильнее.

Обратите внимание, что первая армия имеет преимущество, чтобы начать каждый бой!
"""

# Taken from mission The Warriors

class Warrior:
    # создаёт персонажа с определённым количеством жизней и имющего флаг живого
    def __init__(self):
        self.health = 50
        self.is_alive = True

    # возвращает целое число атаки
    def attack(self):
        return 5
    # отнимает целое число атаки, переданное в него
    def get_damage(self, damage):
        self.health -= int(damage)

class Knight(Warrior):
    # наследует всё от предыдущего класса, но толька атака на 2 больше
    def attack(self):
        return 7

def fight(unit_1, unit_2):
    # устравивает битву между персонажами, при чём сначала 1-й атакует 2-го, идёт проверка жив ли  2-й, затем 2-й атакует первого и также идёт проверка
    while unit_1.health > 0 and unit_2.health > 0:
        unit_2.get_damage(unit_1.attack())
        if unit_2.health <= 0:
            unit_2.is_alive = False
            break
        unit_1.get_damage(unit_2.attack())
        if unit_1.health <= 0:
            unit_1.is_alive = False
            break
    # возвращает результат битвы: если победил 1-й то True, в ином случае False. Побеждает строго 1 персонаж (нет ничьих)
    return unit_1.health > 0 and unit_2.health <= 0


class Army():
    # создаёт список с пресонажами Одного Типа (Только рыцари либо только войны)
    def add_units(self, warrior_class, number):
        battler = warrior_class
        self.army = [battler() for _ in range(number)]


class Battle(Knight, Warrior):
    # устраивает битву между двумя войсками (списками свойнами из прошлого класса)
    def fight(self, army_1, army_2):
        # бксконечный цикл, идёт пока его не остановят изнутри
        while True:
            # оценивает результат битвы между войнами по индексом 0. Если победил 1-й, то вычёркивает 2-го из списка его армии
            if fight(army_1.army[0], army_2.army[0]):
                del army_2.army[0]
                if len(army_2.army) == 0: break
            # если победил воторой, то вычёркивает первого из списка его армии
            else:
                del army_1.army[0]
                if len(army_1.army) == 0: break
        # Война идёт до победного, и если в первой армии осталось больше бойцов, то возвращает True, в обратном случае False
        return len(army_1.army) > len(army_2.army)


my_army = Army()
my_army.add_units(Warrior, 150)

enemy_army = Army()
enemy_army.add_units(Knight, 45)

battle = Battle()
print(battle.fight(my_army, enemy_army))
